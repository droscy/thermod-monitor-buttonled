#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Thermod monitor for Raspberry Pi with one button and one RGB LED.

@author:     Simone Rossetto
@copyright:  2018 Simone Rossetto
@license:    GNU General Public License v3
@contact:    simros85@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import signal
import argparse
import requests
import time
import logging
import configparser

from thermod import ThermodStatus
#from thermod.config import MAIN_CONFIG_FILES as THERMOD_CONFIG_FILES
from thermod.common import LogStyleAdapter, LOGGER_BASE_NAME, LOGGER_FMT_MSG, \
    LOGGER_FMT_TIME, LOGGER_FMT_STYLE, LOGGER_FMT_MSG_SYSLOG, \
    LOGGER_FMT_DATETIME, SOCKET_DEFAULT_HOST, SOCKET_DEFAULT_PORT, \
    RET_CODE_OK, RET_CODE_CFG_FILE_UNKNOWN_ERR, RET_CODE_CFG_FILE_INVALID
from gpiozero import Button, RGBLED
from threading import Timer, Lock
from logging.handlers import SysLogHandler
from operator import mul

__version__ = '1.1.0.dev2'
__date__ = '2017-05-12'
__updated__ = '2020-05-08'

__monitor_name__ = 'buttonled'

# TODO find a way to stop an ongoing GET request when a SIGTERM is received

# setting up logging system
logger = LogStyleAdapter(logging.getLogger('{}.{}'.format(LOGGER_BASE_NAME, __monitor_name__)))
logger.setLevel(logging.INFO)

# config filename and search paths (the last found overwrites the previouses)
MAIN_CONFIG_FILENAME = 'monitor-buttonled.conf'
MAIN_CONFIG_DEFAULT_FILE = os.path.join(os.path.expanduser('~/.thermod'), MAIN_CONFIG_FILENAME)
MAIN_CONFIG_FILES = [os.path.join('/etc/thermod', MAIN_CONFIG_FILENAME),
                     os.path.join('/var/lib/thermod', MAIN_CONFIG_FILENAME),
                     os.path.join('/usr/local/etc/thermod', MAIN_CONFIG_FILENAME),
                     os.path.join(os.path.expanduser('~/.config/thermod'), MAIN_CONFIG_FILENAME),
                     MAIN_CONFIG_DEFAULT_FILE]
#MAIN_CONFIG_FILES.extend(THERMOD_CONFIG_FILES)

# default pins
PIN_RED = 17
PIN_GREEN = 27
PIN_BLUE = 22
PIN_BUTTON = 5

# default LED colors
LED_COLOR_BLACK = (0, 0, 0)
LED_COLOR_RED = (0.8, 0, 0)
LED_COLOR_YELLOW = (1, 1, 0)
LED_COLOR_GREEN = (0, 0.3, 0)
LED_COLOR_BLUE = (0, 0, 1)
LED_COLOR_CYAN = (0, 0.7, 1)
LED_COLOR_MAGENTA = (0.3, 0, 1)

# default values for brightness
DEFAULT_BRIGHTNESS = 1.0
NIGHT_BRIGHTNESS = 0.3
NIGHT_START_TIME = '21:00'
NIGHT_END_TIME = '07:00'

# the real monitor class
class ButtonLedMonitor(object):
    """Manage a Thermod monitor with an RGB LED and a push button."""
    
    def __init__(self,
                 red,
                 green,
                 blue,
                 button,
                 host,
                 port,
                 led_colors,
                 default_brightness,
                 night_brightness,
                 night_start,
                 night_end,
                 timeout=3):
        """Init a ButtonLedMonitor with corresponding PINs.
        
        @param red pin number for red led
        @param green pin number for green led
        @param blue pin number for blue led
        @param button pin number for push button
        @param host thermod daemon host name
        @param port thermod daemon port number
        @param led_colors dictonary with led colors, one element per thermod status
        @param default_brightness default led brightness (float value between 0 and 1)
        @param night_brightness night time led brightness (float value between 0 and 1)
        @param night_start start time for night interval (integer value in format `HHMM`)
        @param night_end end time for night interval (integer value in format `HHMM`)
        @param timeout timeout for button press (seconds)
        """
        
        logger.debug('initializing {}', self.__class__.__name__)
        
        self._status = 'off'
        self._new_status = None
        
        self._pins = (red, green, blue, button)
        
        self._session = None
        self._request_url = 'http://{}:{}'.format(host, port)
        
        self._timeout = timeout
        self._timer = None
        
        self._lock = Lock()
        self._changing_status = Lock()
        self._press_id = 0
        
        self._colors = led_colors
        
        self._bright = default_brightness
        self._nbright = night_brightness
        self._nstart = night_start
        self._nend = night_end
    
    def color(self, status=None):
        """Return the LED color that corrisponds to the provided status.
        
        The brightness is automatically adjusted based on current time.
        Inf the `status` is not provided, the current status is used.
        """
        
        logger.debug('retrieving color for status `{}`', status)
        
        if status is None:
            status = self._status
        
        now = int(time.strftime('%H%M'))
        brightness = self._nbright if (now >= self._nstart or now < self._nend) else self._bright
        logger.debug('current brightness is {:.1f}', brightness)
        
        return tuple(map(mul, self._colors[status], (brightness, ) * 3))
    
    def __enter__(self):
        logger.debug('starting {}', self.__class__.__name__)
        
        self._session = requests.Session()
        
        self._led = RGBLED(self._pins[0], self._pins[1], self._pins[2])
        self._button = Button(self._pins[3])
        
        self._led.blink(on_time=0.2,
                        off_time=0.2,
                        on_color=self.color('off'),
                        off_color=LED_COLOR_BLACK)
        
        self._button.when_pressed = self._manage_button_press
        return self
    
    def __exit__(self, exc_type=None, exc_value=None, traceback=None):
        logger.debug('closing {}', self.__class__.__name__)
        
        self._session.close()
        
        if self._timer:
            self._timer.cancel()
            self._timer = None
        
        self._button.when_pressed = None
        self._button.close()
        
        self._led.off()
        self._led.close()
    
    def update_status(self, longpolling=True):
        try:
            logger.debug('{} Thermod status', ('longpolling' if longpolling else 'updating monitor with'))
            
            rsp = self._session.get('{}/{}'.format(
                self._request_url,
                ('monitor?name={}'.format(__monitor_name__) if longpolling else 'status')))
            
            rsp.raise_for_status()  # check error status code
            
            logger.debug('processing response data')
            jrsp = rsp.json()
            status = ThermodStatus(**jrsp)
            
            color = self.color(status.status)
            
            with self._lock:
                logger.debug('updating LED colour')
                
                # If a change isn't happening (thus the lock is not acquired)
                # we update the led, otherwise we skip this step.
                if self._changing_status.acquire(blocking=False):
                    try:
                        if status.heating_status == 1:
                            logger.debug('the led will blink')
                            self._led.off()
                            self._led.blink(on_time=0.5,
                                            off_time=0.5,
                                            on_color=color,
                                            off_color=LED_COLOR_BLACK)
                        else:
                            logger.debug('the led will stay steady on')
                            self._led.color = color
                        
                        self._status = status.status
                    
                    finally:
                        self._changing_status.release()
        
        except Exception as e:
            logger.debug('error in updating status, the led will blink red-yellow')
            self._led.off()
            self._led.blink(on_time=0.2,
                            off_time=0.2,
                            on_color=self.color('red'),
                            off_color=self.color('yellow'))
            
            raise
    
    def _save_new_status(self, press_id):
        with self._lock:
            # If this is the last started Timer then update the status
            # otherwise do nothing.
            if press_id == self._press_id:
                logger.info('updating Thermod with new status "{}"', self._new_status)
                try:
                    self._led.off()
                    rsp = self._session.post('{}/settings'.format(self._request_url),
                                             data={'status': self._new_status})
                finally:
                    self._new_status = None
                    self._changing_status.release()
    
    def _manage_button_press(self):
        with self._lock:
            try:
                if self._changing_status.acquire(blocking=False):
                    logger.debug('button pressed for first time')
                    
                    # This is the first press, we check the current status and
                    # we update the temporary new status.
                    if self._status == 'auto':
                        self._new_status = 'tmax'
                    else:
                        self._new_status = 'auto'
                
                else:
                    logger.debug('button pressed')
                    
                    # This is a sequential press, we clear the timer, we check
                    # the temporary new status and we update itself.
                    if self._timer:
                        self._timer.cancel()
                        self._timer = None
                    
                    if self._new_status == 'auto':
                        self._new_status = 'tmax'
                    elif self._new_status == 'tmax':
                        self._new_status = 'tmin'
                    elif self._new_status == 'tmin':
                        self._new_status = 't0'
                    elif self._new_status == 't0':
                        self._new_status = 'off'
                    elif self._new_status == 'off':
                        self._new_status = 'on'
                    elif self._new_status == 'on':
                        self._new_status = 'auto'
                
                self._led.color = self.color(self._new_status)
            
            finally:
                self._press_id += 1
                self._timer = Timer(self._timeout, self._save_new_status, [self._press_id])
                self._timer.start()


# shutdown check and return code
running = True
main_return_code = 0

def shutdown(signum=None, frame=None, exitcode=0):
    global running, main_return_code
    logger.info('shutdown requested')
    running = False
    main_return_code = exitcode

signal.signal(signal.SIGTERM, shutdown)


# parse input arguments
parser = argparse.ArgumentParser(description='Thermod Button+LED Monitor')
parser.add_argument('-c', '--config', action='store', default=None, help='path to configuration file')
parser.add_argument('-L', '--log', action='store', default=None, help='write log messages to LOG file (full path)')
parser.add_argument('-D', '--debug', action='store_true', help='start the monitor in debug mode')
parser.add_argument('--syslog', action='store_true', help='log messages to syslog (useful if started by systemd)')
parser.add_argument('--daemon', action='store_true', help='alias for --syslog')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(__version__))
args = parser.parse_args()

# set logger
if args.debug:
    logger.setLevel(logging.DEBUG)

if args.syslog or args.daemon:
    syslog = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_DAEMON)
    syslog.setFormatter(logging.Formatter(fmt=LOGGER_FMT_MSG_SYSLOG,
                                          style=LOGGER_FMT_STYLE))
    logger.addHandler(syslog)
else:
    console = logging.StreamHandler(sys.stdout)
    console.setFormatter(logging.Formatter(fmt=LOGGER_FMT_MSG,
                                           datefmt=LOGGER_FMT_TIME,
                                           style=LOGGER_FMT_STYLE))
    logger.addHandler(console)

if args.log:
    try:
        logfile = logging.FileHandler(args.log, mode='a')
    
    except PermissionError as pe:
        logger.warning('cannot write log to `{}`: {}', args.log, pe)
        logger.info('the monitor will start without logfile')
    
    else:
        logfile.setFormatter(logging.Formatter(fmt=LOGGER_FMT_MSG,
                                               datefmt=LOGGER_FMT_DATETIME,
                                               style=LOGGER_FMT_STYLE))
        logger.addHandler(logfile)
    
        if args.syslog or args.daemon:
            # When a custom log file is configured and the deamon in started
            # in background, only warnings and errors are printed to syslog.
            syslog.setLevel(logging.WARNING)
        
        logger.debug('logging to file {}', args.log)

# read config file
config_files = args.config if args.config else MAIN_CONFIG_FILES

try:
    cfg_err = RET_CODE_OK
    cfg = configparser.ConfigParser()
    
    logger.debug('searching configuration in files {}', config_files)
    _cfg_files_found = cfg.read(config_files)
    
    if _cfg_files_found:
        logger.debug('configuration files found: {}', _cfg_files_found)
    else:
        logger.info('no configuration files found, creating a default one in {}', MAIN_CONFIG_DEFAULT_FILE)
        
        cfg['monitor/buttonled'] = {'red': PIN_RED,
                                    'green': PIN_GREEN,
                                    'blue': PIN_BLUE,
                                    'button': PIN_BUTTON,
                                    'host': SOCKET_DEFAULT_HOST,
                                    'port': SOCKET_DEFAULT_PORT}
        
        cfg['monitor/buttonled/colors'] = {'auto': ','.join([str(c) for c in LED_COLOR_GREEN]),
                                           'tmax': ','.join([str(c) for c in LED_COLOR_YELLOW]),
                                           'tmin': ','.join([str(c) for c in LED_COLOR_CYAN]),
                                           't0': ','.join([str(c) for c in LED_COLOR_BLUE]),
                                           'on': ','.join([str(c) for c in LED_COLOR_MAGENTA]),
                                           'off': ','.join([str(c) for c in LED_COLOR_RED]),
                                           'red': ','.join([str(c) for c in LED_COLOR_RED]),
                                           'yellow': ','.join([str(c) for c in LED_COLOR_YELLOW])}
        
        cfg['monitor/buttonled/brightness'] = {'default': DEFAULT_BRIGHTNESS,
                                               'night': NIGHT_BRIGHTNESS,
                                               'begin': NIGHT_START_TIME,
                                               'end': NIGHT_END_TIME}
        
        try:
            os.makedirs(os.path.dirname(MAIN_CONFIG_DEFAULT_FILE), exist_ok=True)
            
            with open(MAIN_CONFIG_DEFAULT_FILE, 'w') as cfgfile:
                cfg.write(cfgfile)
        
        except:
            logger.warning('cannot create config file, continue with default settings')
   
    # pins
    red = cfg.getint('monitor/buttonled', 'red', fallback=PIN_RED)
    green = cfg.getint('monitor/buttonled', 'green', fallback=PIN_GREEN)
    blue = cfg.getint('monitor/buttonled', 'blue', fallback=PIN_BLUE)
    button = cfg.getint('monitor/buttonled', 'button', fallback=PIN_BUTTON)
    
    # LED color for statuses
    colors = {'auto': [float(c) for c in cfg.get('monitor/buttonled/colors', 'auto', fallback=','.join([str(c) for c in LED_COLOR_GREEN])).split(',')],
              'tmax': [float(c) for c in cfg.get('monitor/buttonled/colors', 'tmax', fallback=','.join([str(c) for c in LED_COLOR_YELLOW])).split(',')],
              'tmin': [float(c) for c in cfg.get('monitor/buttonled/colors', 'tmin', fallback=','.join([str(c) for c in LED_COLOR_CYAN])).split(',')],
              't0': [float(c) for c in cfg.get('monitor/buttonled/colors', 't0', fallback=','.join([str(c) for c in LED_COLOR_BLUE])).split(',')],
              'on': [float(c) for c in cfg.get('monitor/buttonled/colors', 'on', fallback=','.join([str(c) for c in LED_COLOR_MAGENTA])).split(',')],
              'off': [float(c) for c in cfg.get('monitor/buttonled/colors', 'off', fallback=','.join([str(c) for c in LED_COLOR_RED])).split(',')],
              'red': [float(c) for c in cfg.get('monitor/buttonled/colors', 'red', fallback=','.join([str(c) for c in LED_COLOR_RED])).split(',')],
              'yellow': [float(c) for c in cfg.get('monitor/buttonled/colors', 'yellow', fallback=','.join([str(c) for c in LED_COLOR_YELLOW])).split(',')]}
    
    # connection settings (searched even in main thermod settings)
    host = cfg.get('monitor/buttonled', 'host', fallback=cfg.get('socket', 'host', fallback=SOCKET_DEFAULT_HOST))
    port = cfg.getint('monitor/buttonled', 'port', fallback=cfg.get('socket', 'port', fallback=SOCKET_DEFAULT_PORT))
    
    # LED brightness normal and night time
    default_brightness = cfg.getfloat('monitor/buttonled/brightness', 'default', fallback=DEFAULT_BRIGHTNESS)
    night_brightness = cfg.getfloat('monitor/buttonled/brightness', 'night', fallback=NIGHT_BRIGHTNESS)
    night_start_time = int(cfg.get('monitor/buttonled/brightness', 'begin', fallback=NIGHT_START_TIME).replace(':', ''))
    night_end_time = int(cfg.get('monitor/buttonled/brightness', 'end', fallback=NIGHT_END_TIME).replace(':', ''))

except ValueError as ve:
    logger.error('invalid value in configuration file: {}', ve)
    cfe_error = RET_CODE_CFG_FILE_INVALID

except configparser.Error as cpe:
    logger.error('error in configuration file: {}', cpe)
    cfg_err = RET_CODE_CFG_FILE_INVALID

except Exception as e:
    logger.critical('unknown error in configuration file: {}', e, exc_info=True)
    cfg_err = RET_CODE_CFG_FILE_UNKNOWN_ERR

finally:
    if cfg_err != RET_CODE_OK:
        logger.info('closing monitor with return code {}', cfg_err)
        exit(cfg_err)

# main
with ButtonLedMonitor(red,
                      green,
                      blue,
                      button,
                      host,
                      port,
                      colors,
                      default_brightness,
                      night_brightness,
                      night_start_time,
                      night_end_time) as monitor:
    try:
        logger.info('Thermod Button+LED monitor v{} started', __version__)
        
        try:
            logger.debug('start first connection to Thermod')
            monitor.update_status(False)
        
        except (requests.ConnectionError, requests.Timeout) as e:
            # do nothing, continue and go to sleep
            logger.error('errore while connecting to Thermod: {}', e)
        
        logger.debug('starting main cycle')
        
        while running:
            try:
                monitor.update_status()
            
            except (KeyError, ValueError) as ve:
                logger.warning('invalid value returned from Thermod: {}', ve)
                time.sleep(10)
            
            except requests.RequestException as e:
                logger.warning('error while communicating with Thermod: {}', e)
                time.sleep(10)
    
    except Exception as e:
        logger.critical('unknown error: {}', e)
        main_return_code = 1
    
    except KeyboardInterrupt:
        logger.debug('shutdown requested by keyboard interrupt')
        shutdown()

logger.info('closing monitor with return code {}', main_return_code)
exit(main_return_code)

# vim: syntax=python fileencoding=utf-8
